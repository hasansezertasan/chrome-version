{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Chrome Version <p> Get the version of Chrome installed on Windows, Linux, Mac. Cross-platform using Python, native OS detection, does not require Selenium. </p> <p> </p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install chrome-version\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Module:</p> <pre><code>import chrome_version\nprint(chrome_version.get_chrome_version())\n# '103.0.5060.114'\n</code></pre> <p>CLI:</p> <pre><code>chrome-version\n103.0.5060.114\n</code></pre>"},{"location":"#why","title":"Why?","text":"<p>At first,</p> <p>I needed to get the Chrome version for a project I was working on, which was using Undetected Chromedriver. I found the gist below.</p> <p>When I used it in a variaty of projects, I decided to turn it into a module so I'll be free of copy/paste. It only have one functionality: getting the chrome version.</p> <p>Then,</p> <p>I decided to use it to learn more about:</p> <ul> <li>Using Poetry for packaging and dependency management.</li> <li>Using scripts for CLI.</li> <li>Versioning.</li> <li>License management.</li> <li>Documentation.</li> <li>Publishing a module on PyPI.</li> <li>Using GitHub Actions to automate the publishing process.</li> <li>...</li> </ul> <p>Finally,</p> <p>Now it's kind of a playground for me to learn more...</p>"},{"location":"#motivation","title":"Motivation","text":"<ul> <li>It might be useful for someone.</li> <li>It's easier to pip install a module than copy/paste a gist.</li> <li>Educational Purposes: A simple module is a good practice for me to learn how to build modules and publish them on PyPI and show others how easy it is.</li> </ul>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>Based on chrome-version by Kory Becker.</p> <p>This package provides a CLI wrapper for the original project. All credit reserved to the author of the original code.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<ul> <li>Nothing yet.</li> </ul>"},{"location":"changelog/#031-2023-12-31","title":"[0.3.1] - 2023-12-31","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li><code>README.md</code>: Updated <code>disclaimer</code> and <code>installation</code> section.</li> </ul>"},{"location":"changelog/#030-2023-09-30","title":"0.3.0 - 2023-09-30","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li><code>README.md</code></li> <li><code>pyproject.toml</code></li> <li>Python Version Support range is changed to <code>^3.6</code> from <code>^3.8</code>.</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Simple CLI Tool to get the Chrome version with zero dependencies.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>CLI Tool wrapping the module with typer is removed.</li> <li>Optional dependency <code>typer</code> for CLI Tool is removed.</li> </ul>"},{"location":"changelog/#020-2023-09-16","title":"0.2.0 - 2023-09-16","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Module itself with poetry.</li> <li>CLI Tool wrapping the module with typer.</li> <li>Optional dependency <code>typer</code> for CLI Tool.</li> <li>MkDocs for documentation.</li> <li>GitHub Actions:</li> <li>Generate Documentation.</li> <li>Publish to PyPI.</li> <li>Dependabot for dependency management.</li> <li>Funding options for GitHub Sponsors.</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li><code>README.md</code> to include installation and usage instructions.</li> <li>Dependencies to fit the project.</li> </ul>"},{"location":"changelog/#010-2023-09-08","title":"0.1.0 - 2023-09-08","text":"<ul> <li>initial release</li> </ul>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Project Structure</li> <li>Hello World CLI Tool.</li> <li>Pre Commit Hooks</li> <li><code>CHANGELOG.md</code></li> <li><code>README.md</code></li> <li><code>LICENSE</code></li> </ul>"},{"location":"reference/","title":"API Reference","text":"<p>This module has only one function: <code>get_chrome_version()</code>. It returns the version of the Chrome installed on the system.</p>"},{"location":"reference/#chrome_version.core.extract_version_folder","title":"<code>extract_version_folder()</code>","text":"<p>Extracts the Chrome version from the folder name.</p> <p>Check if the Chrome folder exists in the x32 or x64 Program Files folders.</p> Source code in <code>chrome_version/core.py</code> <pre><code>def extract_version_folder():\n    \"\"\"Extracts the Chrome version from the folder name.\n\n    Check if the Chrome folder exists in the x32 or x64 Program Files folders.\n    \"\"\"\n    for i in range(2):\n        path = \"C:\\\\Program Files\" + (\" (x86)\" if i else \"\") + \"\\\\Google\\\\Chrome\\\\Application\"\n        if os.path.isdir(path):\n            paths = [f.path for f in os.scandir(path) if f.is_dir()]\n            for path in paths:\n                filename = os.path.basename(path)\n                pattern = \"\\d+\\.\\d+\\.\\d+\\.\\d+\"\n                match = re.search(pattern, filename)\n                if match and match.group():\n                    # Found a Chrome version.\n                    return match.group(0)\n\n    return None\n</code></pre>"},{"location":"reference/#chrome_version.core.extract_version_registry","title":"<code>extract_version_registry(output)</code>","text":"<p>Extracts the Chrome version from the registry output.</p> Source code in <code>chrome_version/core.py</code> <pre><code>def extract_version_registry(output):\n    \"\"\"Extracts the Chrome version from the registry output.\"\"\"\n    try:\n        google_version = \"\"\n        for letter in output[output.rindex(\"DisplayVersion    REG_SZ\") + 24 :]:\n            if letter != \"\\n\":\n                google_version += letter\n            else:\n                break\n        return google_version.strip()\n    except TypeError:\n        return\n</code></pre>"},{"location":"reference/#chrome_version.core.get_chrome_version","title":"<code>get_chrome_version()</code>","text":"<p>Gets the Chrome version.</p> Source code in <code>chrome_version/core.py</code> <pre><code>def get_chrome_version():\n    \"\"\"Gets the Chrome version.\"\"\"\n    version = None\n    install_path = None\n\n    try:\n        if platform == \"linux\" or platform == \"linux2\":\n            # linux\n            install_path = \"/usr/bin/google-chrome\"\n        elif platform == \"darwin\":\n            # OS X\n            install_path = \"/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\"\n        elif platform == \"win32\":\n            # Windows...\n            try:\n                # Try registry key.\n                stream = os.popen(\n                    'reg query \"HKLM\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\Google Chrome\"'\n                )\n                output = stream.read()\n                version = extract_version_registry(output)\n            except Exception:\n                # Try folder path.\n                version = extract_version_folder()\n    except Exception as ex:\n        print(ex)\n\n    version = os.popen(f\"{install_path} --version\").read().strip(\"Google Chrome \").strip() if install_path else version\n\n    return version\n</code></pre>"}]}