---
name: CI
on:
  workflow_dispatch:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: Run Tests on ${{ matrix.os }}
    timeout-minutes: 10
    steps:
      - name: System Info
        shell: bash
        run: |
          if [[ ${{ matrix.os }} == "ubuntu-latest" ]]; then
              echo "The system is Linux."
              uname -a || true
              lsb_release -a || true
              gcc --version || true
          elif [[ ${{ matrix.os }} == "macos-latest" ]]; then
              echo "The system is macOS."
              sw_vers || true
              uname -a || true
              gcc --version || true
          elif [[ ${{ matrix.os }} == "windows-latest" ]]; then
              echo "The system is Windows (using a Unix-like environment)."
              systeminfo || true
          else
              echo "Unknown OS: $OS_TYPE"
              exit 1
          fi
      - name: Environment Info
        run: |
          env || true
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'
      - name: Setup uv
        id: setup-uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: |
            pyproject.toml
            uv.lock
      - name: Restore cache
        if: steps.setup-uv.outputs.cache-hit == 'true'
        run: echo "Cache was restored"
      - name: Setup Chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@v2
      - name: Let's see where Chrome is installed
        run: |
          echo "Chrome is installed at: ${{ steps.setup-chrome.outputs.chrome-path }}"
      - name: Check Chrome Version
        shell: bash
        run: |
          export CHROME_VERSION=$(uv run chrome-version)
          export SETUP_CHROME_VERSION=${{ steps.setup-chrome.outputs.chrome-version }}
          echo "Chrome version from uv run chrome-version: $CHROME_VERSION"
          echo "Chrome version from setup-chrome action: $SETUP_CHROME_VERSION"
          if [ "$CHROME_VERSION" != "$SETUP_CHROME_VERSION" ]; then
            echo "Chrome version mismatch"
            exit 1
          fi
          echo "All is well!"
